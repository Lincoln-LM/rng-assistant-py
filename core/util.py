"""Utility Functions"""

from io import BytesIO
from PIL import Image
import requests
from dearpygui import dearpygui as dpg
import mem_edit

JUMP_DATA = (
    # (mult, add)
    (0x41C64E6D, 0x6073),
    (0xC2A29A69, 0xE97E7B6A),
    (0xEE067F11, 0x31B0DDE4),
    (0xCFDDDF21, 0x67DBB608),
    (0x5F748241, 0xCBA72510),
    (0x8B2E1481, 0x1D29AE20),
    (0x76006901, 0xBA84EC40),
    (0x1711D201, 0x79F01880),
    (0xBE67A401, 0x8793100),
    (0xDDDF4801, 0x6B566200),
    (0x3FFE9001, 0x803CC400),
    (0x90FD2001, 0xA6B98800),
    (0x65FA4001, 0xE6731000),
    (0xDBF48001, 0x30E62000),
    (0xF7E90001, 0xF1CC4000),
    (0xEFD20001, 0x23988000),
    (0xDFA40001, 0x47310000),
    (0xBF480001, 0x8E620000),
    (0x7E900001, 0x1CC40000),
    (0xFD200001, 0x39880000),
    (0xFA400001, 0x73100000),
    (0xF4800001, 0xE6200000),
    (0xE9000001, 0xCC400000),
    (0xD2000001, 0x98800000),
    (0xA4000001, 0x31000000),
    (0x48000001, 0x62000000),
    (0x90000001, 0xC4000000),
    (0x20000001, 0x88000000),
    (0x40000001, 0x10000000),
    (0x80000001, 0x20000000),
    (0x1, 0x40000000),
    (0x1, 0x80000000),
)

def lcrng_distance(state0: int, state1: int) -> int:
    """Efficiently compute the distance from LCRNG state0 -> state1"""
    mask = 1
    dist = 0

    for mult, add in JUMP_DATA:
        if state0 == state1:
            break

        if (state0 ^ state1) & mask:
            state0 = (state0 * mult + add) & 0xFFFFFFFF
            dist += mask

        mask <<= 1

    return dist

def get_pid_list(key_word: str = None):
    """Get list of processes"""
    pid_list = []
    available_pids = mem_edit.Process.list_available_pids()
    for pid in available_pids:
        # TODO: windows support
        try:
            with open(f'/proc/{pid}/cmdline', 'rb') as cmdline:
                path = cmdline.read().decode().split('\x00')[0].split(" ")[0]
        except FileNotFoundError:
            continue
        if path:
            if key_word:
                if key_word.lower() not in path.lower():
                    continue
            pid_list.append(f"{path} ({pid})")
    return pid_list

# maps tags to their currently loaded species/form/shiny to avoid loading mulitple times
TAG_CURRENT_SPRITE = {}

def load_sprite(species: int, form: int, shiny: bool, existing_tag: str = None):
    """Load sprite for use in dpg1"""
    if species == 0:
        shiny = False
    if existing_tag is not None:
        if TAG_CURRENT_SPRITE.get(existing_tag, None) == (species, form, shiny):
            return
        TAG_CURRENT_SPRITE[existing_tag] = (species, form, shiny)
    # TODO: better sprite solution
    name = f"{species}{f'-{form}' if form else ''}{'s' if shiny else ''}"
    url = f"https://github.com/kwsch/PKHeX/blob/master/PKHeX.Drawing.PokeSprite/Resources/img/Big%20{'Shiny' if shiny else 'Pokemon'}%20Sprites/b_{name}.png?raw=true"
    response = requests.get(url)
    img = Image.open(BytesIO(response.content)).convert("RGBA")
    dpg_image = []
    for i in range(0, img.height):
        for j in range(0, img.width):
            pixel = img.getpixel((j, i))
            dpg_image.append(pixel[0] / 255)
            dpg_image.append(pixel[1] / 255)
            dpg_image.append(pixel[2] / 255)
            dpg_image.append(pixel[3] / 255)
    if existing_tag is not None:
        dpg.set_value(existing_tag, dpg_image)
        return existing_tag
    with dpg.texture_registry(show=False):
        return dpg.add_dynamic_texture(
            width=68,
            height=56,
            default_value=dpg_image,
        )

SPECIES_MAP = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    82,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    160,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    194,
    195,
    196,
    197,
    198,
    199,
    200,
    201,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    290,
    291,
    292,
    276,
    277,
    285,
    286,
    327,
    278,
    279,
    283,
    284,
    320,
    321,
    300,
    301,
    352,
    343,
    344,
    299,
    324,
    302,
    339,
    340,
    370,
    341,
    342,
    349,
    350,
    318,
    319,
    328,
    329,
    330,
    296,
    297,
    309,
    310,
    322,
    323,
    363,
    364,
    365,
    331,
    332,
    361,
    362,
    337,
    338,
    298,
    325,
    326,
    311,
    312,
    303,
    307,
    308,
    333,
    334,
    360,
    355,
    356,
    315,
    287,
    288,
    289,
    316,
    317,
    357,
    293,
    294,
    295,
    366,
    367,
    368,
    359,
    353,
    354,
    336,
    335,
    369,
    304,
    305,
    306,
    351,
    313,
    314,
    345,
    346,
    347,
    348,
    280,
    281,
    282,
    371,
    372,
    373,
    374,
    375,
    376,
    377,
    378,
    379,
    382,
    383,
    384,
    380,
    381,
    385,
    386,
    358,
]
